add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2336.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2336.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2339.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2339.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2340.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2340.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2341.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2341.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2342.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2342.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2343.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2343.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2344.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2344.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2344.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2344.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2345.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2345.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2346.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2346.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2347.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2347.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2348.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2348.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2349.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2349.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2350.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2350.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2351.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2351.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2352.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2352.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2353.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2353.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2354.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2354.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2355.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2355.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2356.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2356.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2357.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2357.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2358.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2358.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2359.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2359.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
# read in blon protein genes from clustal omega
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2360.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2360.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
tree <- read.tree("~/Desktop/repos/bifido/scripts/blast/protein_blons/blon_2361.tree")
species <- tree$tip.label
split_spec <- sapply(strsplit(species, "!"), function(x) x[2], simplify=TRUE)
# color branch labels by unique names (needs some specification for final figure)
# add specific colors for infantis and longum and suis
# if infantis in the string replace with infantis, same with all subspecies
split1 <- replace(split_spec, grepl("infantis",split_spec), "infantis")
split2 <- replace(split1, grepl("subsp.-longum",split1), "subsp.-longum")
tipcol <- rep('black', length(tree$tip.label))
colors <- rainbow(length(sort(unique(split2))))
for(i in 1:length(unique(split2))) {
if(sort(unique(split2))[i] != "") {
tipcol[grep(sort(unique(split2))[i], tree$tip.label)] <- colors[i]
}
}
png('blon_2361.png', width = 2500, height = 2000)
plot(tree, main="Neighbor Joining", tip.color=tipcol)
add.scale.bar(cex = 4, font = 2, col = "red")
layout(1)
dev.off()
